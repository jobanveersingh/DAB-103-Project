import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
dataset=pd.read_csv(r'C:\Users\Acer\Desktop\rows.csv')
dataset
type(dataset)
dataset.head()
dataset.tail()
dataset.shape
dataset.shape[0]
dataset.shape[1]
dataset.columns
duplicate=dataset.iloc[:,1:29].duplicated()
dataset.iloc[:,1:29][duplicate]
dataset.info()
dataset.isnull().sum()
dataset.nunique()
dataset.iloc[:,1:35].boxplot(rot=90,fontsize=10,figsize=(10, 10))
plt.xlabel("Data")
plt.ylabel("Values")
plt.title("Plot showing Outliers")
dataset.describe(include=['O'])
dataset.describe(exclude=['O'])
correlation=dataset.corr()
correlation
fig = plt.figure(figsize=(11,11))
sns.heatmap(correlation,cmap='BuPu',annot=True)
plt.title('Correlation Plot')
group = dataset.groupby(['YEAR']).size()
group
year=dataset[(dataset.YEAR ==2010 ) & (dataset.LocationDesc=='California')]
year
dataset['Education'].value_counts().sort_index()
plt.figure(figsize = (10,8))

plt.hist(dataset['TopicDesc'],bins=14,color='green')
plt.xlabel('Topic Description' ,color = 'black', fontsize=16)
plt.ylabel('Count' ,color = 'black', fontsize=16 )
plt.title('Total number of reports of Topic Description' ,color = 'black', fontsize=16)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.show()
dataset['Race'].value_counts().plot(kind='bar' ,figsize=(10, 8),rot='50',color='orange')
plt.xlabel("Race", color = 'black' , fontsize = 14)
plt.ylabel("Count",  color = 'black' , fontsize = 14)
plt.title("Race vs Counts" , color = 'black' , fontsize = 16)

plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.show()
educ= dataset['Education']
measD=dataset['MeasureDesc']
plt.plot(educ,measD,'o',alpha=0.5)
plt.xlabel('Education' ,color = 'black', fontsize=16)
plt.ylabel('Description Of Measure' ,color = 'black', fontsize=16)
plt.title('Description of measure vs Education',color = 'black', fontsize=16)

plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.show()
plt.figure(figsize = (10,8))

sns.kdeplot(dataset['Data_Value'])
plt.xlabel('Data Value',color = 'black', fontsize=14)
plt.ylabel('Density',color = 'black', fontsize=14)
plt.title('Density Estimation on Data Value',color = 'black', fontsize=16)
plt.show()
plt.figure(figsize = (10,8))

sns.kdeplot(dataset['Sample_Size'])
plt.xlabel('Sample Size',color = 'black', fontsize=14)
plt.ylabel('Density',color = 'black', fontsize=14)
plt.title('Density Estimation on Sample Size',color = 'black', fontsize=16)
plt.show()
plt.figure(figsize =(10, 8))
sns.boxplot(x='YEAR',y='MeasureDesc',data=dataset,whis=10 )
plt.title('Year vs Description of Measure' ,color = 'black', fontsize=16)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.show()
plt.figure(figsize =(10,10))
sns.boxplot(x='YEAR',y='Response',data=dataset,whis=10)
plt.title('Year vs Response' ,color = 'black', fontsize=16)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.show()
dataset.Gender.value_counts()
dataset.Gender.value_counts().plot(kind='pie',title='Gender',
                                      autopct='%1.1f%%',labels= ['Overall', 'Male' ,'Female' ],
                                   colors = ['lightskyblue', 'red', 'gold'],
                                      ylabel=" " , figsize=(10, 10),shadow=True)

plt.show()
dataset.Race.value_counts().plot(kind='pie',title='Race',
                                 colors = ['lightskyblue', 'red', 'blue', 'green', 'gold','pink'],
                                      autopct='%1.1f%%',
                                      ylabel=" " , figsize=(10, 10),shadow=True)

plt.show()
dataset.Education.value_counts().plot(kind='pie',title='Education',
                                      colors = ['lightskyblue', 'red', 'green', 'gold'],
                                      autopct='%1.1f%%',
                                      ylabel=" " , figsize=(10, 10),shadow=True)

plt.show()
dataset.Response.value_counts().plot(kind='pie',title='Response',
                                      autopct='%1.1f%%',
                                      ylabel=" " , figsize=(10, 10),shadow=True)

plt.show()
dataset['LocationDesc'].value_counts()
dataset['TopicDesc'].value_counts()
to_drop = ['TopicType' ,
           'TopicId' ,
           'DataSource',
           'Data_Value_Unit',
           'TopicTypeId',
           'MeasureId',
           'StratificationID1',
           'StratificationID2' ,
           'StratificationID3' ,
           'StratificationID4',
           'Data_Value_Footnote_Symbol' ,
           'Data_Value_Footnote',
           'Data_Value_Std_Err' ,
           'Low_Confidence_Limit' ,
           'High_Confidence_Limit',
          'GeoLocation']

dataset.drop(to_drop, inplace=True, axis=1)
dataset
new_names =  {'Unnamed: 0': 'Year',
              'LocationAbbr': 'Postal_code',
              'LocationDesc': 'State',
              'TopicDesc': 'Subject_matter',
              'MeasureDesc': 'Status',
              'Response': 'Consumption'}
dataset.rename(columns=new_names, inplace=True)
dataset
duplicate=dataset.iloc[:,1:14].duplicated()
dataset.iloc[:,1:14][duplicate]
dataset.isnull().sum()
dataset.describe(include=['O'])
dataset.describe(exclude=['O'])
num = ['YEAR',
        'Data_Value',
        'Sample_Size']
        missing_num = -1
dataset[num] = dataset[num].fillna(missing_num)
dataset["Consumption"].fillna('Missing Values', inplace = True)
dataset
dataset.isnull().sum()
dataset.describe(include=['O'])
dataset.describe(exclude=['O'])
dataset.iloc[:,:14].boxplot(rot=90,fontsize=10,figsize=(10, 10))
plt.xlabel("Data")
plt.ylabel("Values")
plt.title("Plot showing Outliers")
def remove_outlier(Sample_Size):
    sorted(Sample_Size)
    Q1 = np.quantile(dataset['Sample_Size'],0.25)
    Q3 = np.quantile(dataset['Sample_Size'],0.75)
    IQR=Q3-Q1
    lower_range=Q1-(1.5 * IQR)
    upper_range=Q3+(1.5 * IQR)
    return lower_range, upper_range
    low_sample_size,up_sample_size=remove_outlier(dataset['Sample_Size'])
dataset['Sample_Size']=np.where(dataset['Sample_Size']>up_sample_size,up_sample_size,dataset['Sample_Size'])
dataset['Sample_Size']=np.where(dataset['Sample_Size']<low_sample_size,low_sample_size,dataset['Sample_Size'])
dataset.boxplot(column=['Sample_Size'])
plt.show()
gender_data = dataset[dataset['Gender'].isin(['Male' , 'Female' ])]
gender_data
fig = plt.figure(figsize=(10,10))
sns.countplot(data=gender_data, x='Gender')
plt.title("Tobacco Consumtion By Gender")
chn = dataset[dataset['Consumption'].isin(['Current','Former','Never','Every Day','> 25 Cigarettes'])]
chn
fig = plt.figure(figsize=(10,10))
sns.countplot(x='Consumption',data=chn);
plt.title('Count of Tobacco Consumers')
age_data = dataset[dataset['Age'].isin(['Age 25 and Older','Age 20 and Older',
'18 to 24 Years', '65 Years and Older','25 to 44 Years','45 to 64 Years','18 to 44 Years' ])]
age_data
fig = plt.figure(figsize=(12,12))
sns.countplot(data=age_data, x='Age')
plt.title('Age Group Count')
dataset.State.value_counts().plot(kind='pie',title='State',
                                      autopct='%1.1f%%',
                                
                                      ylabel=" " , figsize=(15, 15),shadow=True)

plt.show()
state_data = dataset[dataset['State'].isin(['California','Utah','Puerto Rico','Virgin Islands','Guam','National Median (States and DC)'])]
state_data
fig = plt.figure(figsize=(12,12))
sns.countplot(data=state_data, x='State')
plt.title('State Count')
race_data = dataset[dataset['Race'].isin(['African American','White','Asian/Pacific Islander','Hispanic','American Indian/Alaska Native'])]
race_data
fig = plt.figure(figsize=(12,12))
sns.countplot(data=race_data, x='Race')
plt.title('Race Count')

